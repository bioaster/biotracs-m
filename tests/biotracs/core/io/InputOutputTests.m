classdef InputOutputTests < matlab.unittest.TestCase
    
    properties (TestParameter)
    end
    
    methods (Test)
        
        function testConnection(testCase)
            ispecs = {...
                struct(...
                'name', 'IPort#1', ...
                'class', 'biotracs.data.model.DataMatrix'), ...
                struct(...
                'name', 'IPort#2', ...
                'class', 'biotracs.data.model.DataSet') ...
                };
            i = biotracs.core.io.Input(ispecs);
            
            ospecs = {...
                struct(...
                'name', 'OPort#1', ...
                'class', 'biotracs.data.model.DataMatrix'), ...
                struct(...
                'name', 'OPort#2', ...
                'class', 'biotracs.data.model.DataSet') ...
                };
            o = biotracs.core.io.Output(ospecs);
            
            o.getPort('OPort#1').connectTo( i.getPort('IPort#1') );
            o.getPort('OPort#2').connectTo( i.getPort('IPort#2') );
            
            %testCase.verifyEqual( o.getPort('OPort#1').getData(), [] );
            %testCase.verifyEqual( o.getPort('OPort#2').getData(), [] );
            
            data1 = biotracs.data.model.DataMatrix([1,2]);
            data2 = biotracs.data.model.DataSet([1,3]);
            o.getPort('OPort#1').setData( data1 );
            o.getPort('OPort#2').setData( data2 );
            
            testCase.verifyFalse( o.isConnectedTo(i) );
            testCase.verifyTrue( o.getPort('OPort#1').isConnectedTo(i.getPort('IPort#1')) );
            testCase.verifyTrue( o.getPort('OPort#2').isConnectedTo(i.getPort('IPort#2')) );
            testCase.verifyEqual( o.getPort('OPort#1').getData(), data1 );
            testCase.verifyEqual( o.getPort('OPort#2').getData(), data2 );
            testCase.verifyEqual( i.getPort('IPort#1').getData(), data1 );
            testCase.verifyEqual( i.getPort('IPort#2').getData(), data2 );
        end
        
        
        function testPortSetConnection(testCase)
            ispecs = {...
                struct(...
                'name', 'IPort#1', ...
                'class', 'biotracs.data.model.DataMatrix'), ...
                struct(...
                'name', 'IPort#2', ...
                'class', 'biotracs.data.model.DataSet') ...
                };
            i = biotracs.core.io.Input(ispecs);
            
            ospecs = {...
                struct(...
                'name', 'OPort#1', ...
                'class', 'biotracs.data.model.DataMatrix'), ...
                struct(...
                'name', 'OPort#2', ...
                'class', 'biotracs.data.model.DataSet') ...
                };
            o = biotracs.core.io.Output(ospecs);
            
            o.connectTo(i, 'ConnectionStrategy', 'Indices');
            
            data1 = biotracs.data.model.DataMatrix([1,2]);
            data2 = biotracs.data.model.DataSet([1,3]);
            o.getPort('OPort#1').setData( data1 );
            o.getPort('OPort#2').setData( data2 );
            
            
            testCase.verifyTrue( o.isConnectedTo(i) );
            testCase.verifyTrue( o.getPort('OPort#1').isConnectedTo(i.getPort('IPort#1')) );
            testCase.verifyTrue( o.getPort('OPort#2').isConnectedTo(i.getPort('IPort#2')) );
            testCase.verifyEqual( o.getPort('OPort#1').getData(), data1 );
            testCase.verifyEqual( o.getPort('OPort#2').getData(), data2 );
            testCase.verifyEqual( i.getPort('IPort#1').getData(), data1 );
            testCase.verifyEqual( i.getPort('IPort#2').getData(), data2 );
        end
        
        function testPortSetConnectionStategies(testCase)
            ispecs = {...
                struct(...
                'name', 'IPort#1', ...
                'class', 'biotracs.data.model.DataMatrix'), ...
                struct(...
                'name', 'IPort#2', ...
                'class', 'biotracs.data.model.DataSet') ...
                };
            i = biotracs.core.io.Input(ispecs);
            
            ospecs = {...
                struct(...
                'name', 'OPort#1', ...
                'class', 'biotracs.data.model.DataMatrix'), ...
                struct(...
                'name', 'OPort#2', ...
                'class', 'biotracs.data.model.DataSet') ...
                };
            o = biotracs.core.io.Output(ospecs);
            
            try
                o.connectTo(i, 'ConnectionStrategy', 'Names');
                error('No:ID', 'An error was expected');
            catch exception
                testCase.verifyEqual( exception.identifier, 'PortSet:CannotConnectPortSet' );
            end
            
            o.connectTo(i, 'ConnectionStrategy', 'Auto');
            
            data1 = biotracs.data.model.DataMatrix([1,2]);
            data2 = biotracs.data.model.DataSet([1,3]);
            o.getPort('OPort#1').setData( data1 );
            o.getPort('OPort#2').setData( data2 );
            
            testCase.verifyTrue( o.isConnectedTo(i) );
            testCase.verifyTrue( o.getPort('OPort#1').isConnectedTo(i.getPort('IPort#1')) );
            testCase.verifyTrue( o.getPort('OPort#2').isConnectedTo(i.getPort('IPort#2')) );
            testCase.verifyEqual( o.getPort('OPort#1').getData(), data1 );
            testCase.verifyEqual( o.getPort('OPort#2').getData(), data2 );
            testCase.verifyEqual( i.getPort('IPort#1').getData(), data1 );
            testCase.verifyEqual( i.getPort('IPort#2').getData(), data2 );
        end
        
        function testPortSetConnectionWithResizeInput(testCase)
            ispecs = {...
                struct(...
                'name', 'MyInputPortName#1', ...
                'class', 'biotracs.data.model.DataMatrix'), ...
                struct(...
                'name', 'MyInputAnotherPortName#1', ...
                'class', 'biotracs.data.model.DataSet'), ...
                struct(...
                'name', 'MyInputAnotherPortName#2', ...
                'class', 'biotracs.data.model.DataSet')...
                };
            i = biotracs.core.io.Input(ispecs);
            i.setIsResizable(true);
            
            ospecs = {...
                struct(...
                'name', 'OPort#1', ...
                'class', 'biotracs.data.model.DataMatrix'), ...
                struct(...
                'name', 'OPort#2', ...
                'class', 'biotracs.data.model.DataSet') ...
                };
            o = biotracs.core.io.Output(ospecs);
            
            
            try
                o.connectTo(i, 'ConnectionStrategy', 'Indices');
                error('No:ID', 'An error was expected');
            catch exception
                testCase.verifyEqual( exception.identifier, 'PortSet:CannotConnectPortSet' );
            end
            
            o.connectTo(i, 'ResizeWhenUnmatch', true);
            data1 = biotracs.data.model.DataMatrix([1,2]);
            data2 = biotracs.data.model.DataSet([1,3]);
            o.getPort('OPort#1').setData( data1 );
            o.getPort('OPort#2').setData( data2 );
            
            testCase.verifyTrue( o.isConnectedTo(i) );
            testCase.verifyTrue( o.getPort('OPort#1').isConnectedTo(i.getPort('MyInputPortName#1')) );
            testCase.verifyTrue( o.getPort('OPort#2').isConnectedTo(i.getPort('MyInputPortName#2')) );
            testCase.verifyEqual( o.getPort('OPort#1').getData(), data1 );
            testCase.verifyEqual( o.getPort('OPort#2').getData(), data2 );
            testCase.verifyEqual( i.getPort('MyInputPortName#1').getData(), data1 );
            testCase.verifyEqual( i.getPort('MyInputPortName#2').getData(), data2 );
        end
        
        function testSpecs(testCase)
            input = biotracs.core.io.Input();
            testCase.verifyEqual( input.getLength, 0 );
            
            % ---
            input.addSpecs({...
                struct(...
                'name', 'IOFlow#1',...
                'class', 'biotracs.core.mvc.model.Resource' ...
                ), ...
                struct(...
                'name', 'IOFlow#2',...
                'class', 'biotracs.core.mvc.model.Resource' ...
                ), ...
                }...
                );
            testCase.verifyEqual( input.getLength, 2 );
            testCase.verifyClass( input.getPort('IOFlow#1'), 'biotracs.core.io.InputPort' );
            testCase.verifyClass( input.getPort('IOFlow#2'), 'biotracs.core.io.InputPort' );
            
            % ---
            input.setSpecs({...
                struct(...
                'name', 'IOFlowNew#1',...
                'class', 'biotracs.core.mvc.model.Resource' ...
                ) ...
                }...
                );
            testCase.verifyEqual( input.getLength, 1 );
            testCase.verifyClass( input.getPort('IOFlowNew#1'), 'biotracs.core.io.InputPort' );
            
            % ---
            input.addSpecs({...
                struct(...
                'name', 'IOFlow#1',...
                'class', 'biotracs.core.mvc.model.Resource' ...
                ), ...
                struct(...
                'name', 'IOFlow#2',...
                'class', 'biotracs.core.mvc.model.Resource' ...
                ), ...
                }...
                );
            testCase.verifyEqual( input.getLength, 3 );
            testCase.verifyClass( input.getPort('IOFlowNew#1'), 'biotracs.core.io.InputPort' );
            testCase.verifyClass( input.getPort('IOFlow#1'), 'biotracs.core.io.InputPort' );
            testCase.verifyClass( input.getPort('IOFlow#2'), 'biotracs.core.io.InputPort' );
            testCase.verifyEqual( input.getElementIndexByName('IOFlowNew#1'), 1 );
            testCase.verifyEqual( input.getElementIndexByName('IOFlow#1'), 2 );
            testCase.verifyEqual( input.getElementIndexByName('IOFlow#2'), 3 );
            testCase.verifyClass( input.getPort('IOFlow#1').getData(), 'biotracs.core.mvc.model.Resource' ); %Resource by default
            testCase.verifyClass( input.getPort('IOFlow#2').getData(), 'biotracs.core.mvc.model.Resource' );
            %testCase.verifyEqual( input.getPort('IOFlow#1').getData(), [] );
            %testCase.verifyEqual( input.getPort('IOFlow#2').getData(), [] );
            
            % ---
            input.updateSpecs({...
                struct(...
                'name', 'IOFlow#1',...
                'class', 'biotracs.core.mvc.model.ResourceSet' ...
                ) ...
                }...
                );
            testCase.verifyEqual( input.getLength, 3 );
            testCase.verifyClass( input.getPort('IOFlowNew#1'), 'biotracs.core.io.InputPort' );
            testCase.verifyClass( input.getPort('IOFlow#1'), 'biotracs.core.io.InputPort' );
            testCase.verifyClass( input.getPort('IOFlow#2'), 'biotracs.core.io.InputPort' );
            testCase.verifyEqual( input.getElementIndexByName('IOFlowNew#1'), 1 );
            testCase.verifyEqual( input.getElementIndexByName('IOFlow#1'), 2 );
            testCase.verifyEqual( input.getElementIndexByName('IOFlow#2'), 3 );
            testCase.verifyClass( input.getPort('IOFlow#1').getData(), 'biotracs.core.mvc.model.ResourceSet' );
            %testCase.verifyEqual( input.getPort('IOFlow#1').getData(), [] );
        end
        
    end
    
end
